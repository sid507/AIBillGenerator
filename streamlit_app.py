import streamlit as st
import requests
import datetime
from jinja2 import Environment, FileSystemLoader

# from exception.exceptions import TradingBotException
import sys
import re

import json


def extract_json_from_response(answer):
    # Find the first code block with json
    match = re.search(r"```json\s*(\{.*?\})\s*```", answer, re.DOTALL)
    if match:
        json_str = match.group(1)
        return json.loads(json_str)
    # Fallback: try to parse the whole answer
    try:
        return json.loads(answer)
    except Exception:
        return None

# Add this function to render bill.html
def render_bill_html(date, items, grandTotal, theme):
    print(f"Rendering bill for date: {date}, items: {items}, grandTotal: {grandTotal}")
    env = Environment(loader=FileSystemLoader("templates"))
    template = env.get_template("bill.html")
    # Prepare the theme data
    # theme_data = theme if isinstance(theme, dict) else theme.get("classic_theme", {})
    html_content = template.render(date=date, items=items, grandTotal=grandTotal, theme=theme)
    return html_content

BASE_URL = "http://localhost:8000"  # Backend endpoint

st.set_page_config(
    page_title="Bill Generator",
    page_icon="üåç",
    layout="centered",
    initial_sidebar_state="expanded",
)

st.title("Bill generator Agentic Application")

# Initialize chat history
if "messages" not in st.session_state:
    st.session_state.messages = []

# Display chat history
st.header("How can I help you in planning a trip? Let me know where do you want to visit.")

# Chat input box at bottom
with st.form(key="query_form", clear_on_submit=True):
    user_input = st.text_input("User Input", placeholder="e.g. Plan a trip to Goa for 5 days")
    submit_button = st.form_submit_button("Send")

if submit_button and user_input.strip():
    try:
        with st.spinner("Bot is thinking..."):
            payload = {"question": user_input}
            response = requests.post(f"{BASE_URL}/query", json=payload)

        if response.status_code == 200:
            resp_json = response.json()

            print("Response JSON:", resp_json)  # Debugging line to check the response structure
            answer = resp_json.get("answer", "No answer returned.")
            # Try to extract bill data from the response
            bill_data = resp_json.get("answer", None)
            if bill_data:
                if isinstance(bill_data, str):
                    bill_data = extract_json_from_response(resp_json.get("answer", ""))
                print("Bill data extracted:", bill_data,bill_data.get("date"))  # Debugging line to check the bill data structure
                # bill_data should be a dict with keys: date, items, grandTotal
                bill_html = render_bill_html(
                    bill_data["date"],
                    bill_data["items"],
                    bill_data["grandTotal"],
                    bill_data.get("theme")  # Use the theme from the bill data or default to classic_theme
                )
                st.components.v1.html(bill_html, height=400, scrolling=True)
            else:
                # Fallback: just show the markdown content
                markdown_content = f"""# üåç AI Travel Plan

                # **Generated:** {datetime.datetime.now().strftime('%Y-%m-%d at %H:%M')}  
                # **Created by:** Bill Generator Agent

                ---

                {answer}

                ---

                *This travel plan was generated by AI. Please verify all information, especially prices, operating hours, and travel requirements before your trip.*
                """
                st.markdown(markdown_content)
        else:
            st.error(" Bot failed to respond: " + response.text)

    except Exception as e:
        st.error(f"The response failed due to {e}")
